'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _btoa = require('btoa');

var _btoa2 = _interopRequireDefault(_btoa);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var errors = require('./errors');

var Connection = function () {
  function Connection(baseUrl) {
    var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    _classCallCheck(this, Connection);

    this.baseUrl = baseUrl;
    this.token = token;
  }

  _createClass(Connection, [{
    key: 'request',
    value: function request(path) {
      var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var config = {
        url: '' + this.baseUrl + path,
        method: 'post',
        headers: {
          Accept: 'application/json'
        },
        data: body,
        timeout: 1000
      };

      if (this.token) {
        config.headers['Authorization'] = 'Basic ' + (0, _btoa2.default)(this.token);
      }

      return _axios2.default.request(config).then(function (resp) {
        if (resp.data.status === 'fail') {
          throw errors.formatErrMsg(resp.data);
        } else if (resp.data.status === 'success') {
          return resp.data.data;
        }

        return resp.data;
      }).catch(function (error) {
        throw error;
      });
    }
  }]);

  return Connection;
}();

exports.default = Connection;