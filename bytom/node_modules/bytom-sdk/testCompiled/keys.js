'use strict';

/* eslint-env mocha */

var bytom = require('../dist/index.js');
var uuid = require('uuid');
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');

chai.use(chaiAsPromised);
var expect = chai.expect;

var url = 'http://localhost:9888';
var accessToken = '';

var client = new bytom.Client(url, accessToken);

var keyAlias = 'key-' + uuid.v4();
var password = '12345';

var keyXpub = void 0;

before('set up API objects', function () {

  // Key creation
  return client.keys.create({
    alias: keyAlias,
    password: password
  }).then(function (resp) {
    keyXpub = resp.xpub;
  });
});

describe('key', function () {

  it('successfully creates key', function () {
    return client.keys.create({
      alias: 'key-' + uuid.v4(),
      password: password
    }).then(function (resp) {
      return expect(resp).not.to.be.empty;
    });
  });

  it('rejects key creation due to duplicate alias', function () {
    return expect(client.keys.create({ alias: keyAlias, password: password })).to.be.rejectedWith('BTM800');
  });

  it('returns key in list after key creation, listAll', function () {
    var keyAlias = void 0;
    return client.keys.create({ alias: 'key-' + uuid.v4(), password: password }).then(function (key) {
      keyAlias = key.alias;
      return client.keys.listAll();
    }).then(function (resp) {
      return expect(resp.map(function (item) {
        return item.alias;
      })).to.contain(keyAlias);
    });
  });

  describe('password', function () {
    it('successfully check correct password', function () {
      return client.keys.checkPassword({
        xpub: keyXpub,
        password: password
      }).then(function (resp) {
        expect(resp.check_result).to.be.true;
      });
    });

    it('successfully check password wrong', function () {
      return client.keys.checkPassword({
        xpub: keyXpub,
        password: 'random'
      }).then(function (resp) {
        expect(resp.check_result).to.be.false;
      });
    });

    it('successfully reset password', function () {
      var newPassword = '11111';
      return client.keys.resetPassword({
        xpub: keyXpub,
        old_password: password,
        new_password: newPassword
      }).then(function (resp) {
        expect(resp.changed).to.be.true;
      });
    });
  });
});