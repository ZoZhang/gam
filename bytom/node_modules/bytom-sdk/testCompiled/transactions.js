'use strict';

/* eslint-env mocha */

var assert = require('assert');
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');

chai.use(chaiAsPromised);
var expect = chai.expect;

var _require = require('./testHelpers'),
    balanceByAssetAlias = _require.balanceByAssetAlias,
    client = _require.client,
    createAccount = _require.createAccount,
    createAsset = _require.createAsset,
    createAccountReciever = _require.createAccountReciever;

var btmAlias = 'BTM';

describe('Transaction', function () {
  describe('Transfer btm', function () {
    var aliceAlias = void 0,
        bobAlias = void 0,
        aliceAddress = void 0,
        bobAddress = void 0,
        txId = void 0;

    before(function () {
      return Promise.all([createAccount('alice'), createAccount('bob')]).then(function (objects) {
        aliceAlias = objects[0].alias;
        bobAlias = objects[1].alias;
        return Promise.all([createAccountReciever(aliceAlias), createAccountReciever(bobAlias)]);
      }).then(function (objects) {
        aliceAddress = objects[0].address;
        bobAddress = objects[1].address;
      }).then(function () {
        return client.transactions.build(function (builder) {
          builder.spendFromAccount({
            account_alias: 'default',
            asset_alias: btmAlias,
            amount: 310000000
          });
          builder.controlWithAddress({
            address: aliceAddress,
            asset_alias: btmAlias,
            amount: 100000000
          });
          builder.controlWithAddress({
            address: bobAddress,
            asset_alias: btmAlias,
            amount: 200000000
          });
        });
      }).then(function (issuance) {
        return client.transactions.sign({ transaction: issuance, password: '12345' });
      }).then(function (signed) {
        return client.transactions.submit(signed.transaction.raw_transaction);
      }).then(function (tx) {
        return txId = tx.tx_id;
      });
    });

    it('transfer 1 BTM to alice', function () {
      return client.transactions.list({ id: txId, unconfirmed: true }).then(function (resp) {
        expect(resp[0].outputs.map(function (item) {
          return item.account_alias;
        })).include(aliceAlias);
      });
    });

    it('transfer 1 BTM to bob', function () {
      return client.transactions.list({ id: txId, unconfirmed: true }).then(function (resp) {
        expect(resp[0].outputs.map(function (item) {
          return item.account_alias;
        })).include(bobAlias);
      });
    });
  });

  describe('Issuance', function () {
    var goldAlias = void 0,
        silverAlias = void 0,
        aliceAlias = void 0,
        bobAlias = void 0,
        aliceAddress = void 0,
        bobAddress = void 0,
        txId = void 0;

    before(function () {
      return Promise.all([createAsset('gold'), createAsset('silver'), createAccount('alice'), createAccount('bob')]).then(function (objects) {
        goldAlias = objects[0].alias;
        silverAlias = objects[1].alias;
        aliceAlias = objects[2].alias;
        bobAlias = objects[3].alias;
        return Promise.all([createAccountReciever(aliceAlias), createAccountReciever(bobAlias)]);
      }).then(function (objects) {
        aliceAddress = objects[0].address;
        bobAddress = objects[1].address;
      }).then(function () {
        return client.transactions.build(function (builder) {
          builder.spendFromAccount({
            account_alias: 'default',
            asset_alias: btmAlias,
            amount: 10000000
          });
          builder.issue({
            asset_alias: goldAlias,
            amount: 1000000
          });
          builder.issue({
            asset_alias: silverAlias,
            amount: 2000000
          });
          builder.controlWithAddress({
            address: aliceAddress,
            asset_alias: goldAlias,
            amount: 1000000
          });
          builder.controlWithAddress({
            address: bobAddress,
            asset_alias: silverAlias,
            amount: 2000000
          });
        });
      }).then(function (issuance) {
        return client.transactions.sign({ transaction: issuance, password: '12345' });
      }).then(function (signed) {
        return client.transactions.submit(signed.transaction.raw_transaction);
      }).then(function (tx) {
        return txId = tx.tx_id;
      });
    });

    it('issues 100 units of gold to alice', function () {
      return client.transactions.list({ id: txId, unconfirmed: true }).then(function (resp) {
        expect(resp[0].outputs.map(function (item) {
          return item.account_alias;
        })).include(aliceAlias);
      });
    });

    it('issues 200 units of silver to bob', function () {
      return client.transactions.list({ id: txId, unconfirmed: true }).then(function (resp) {
        expect(resp[0].outputs.map(function (item) {
          return item.account_alias;
        })).include(bobAlias);
      });
    });
  });

  describe('listAll', function () {
    it('success example', function () {
      var created = void 0,
          accountAlias = void 0;

      return createAccount().then(function (account) {
        accountAlias = account.alias;
        return createAccountReciever(accountAlias);
      }).then(function (resp) {
        return client.transactions.build(function (builder) {
          builder.spendFromAccount({
            account_alias: 'default',
            asset_alias: btmAlias,
            amount: 100000000
          });
          builder.controlWithAddress({
            address: resp.address,
            asset_alias: btmAlias,
            amount: 90000000
          });
        });
      }).then(function (txtpl) {
        return client.transactions.sign({
          transaction: txtpl,
          password: '12345'
        });
      }).then(function (signed) {
        return client.transactions.submit(signed.transaction.raw_transaction);
      }).then(function (tx) {
        return created = tx.tx_id;
      }).then(function () {
        return client.transactions.listAll();
      }).then(function (resp) {
        expect(resp.map(function (item) {
          return item.tx_id;
        })).to.include(created);
      });
    });
  });

  describe('Builder function errors', function () {
    it('rejects via promise', function () {
      return expect(client.transactions.build(function () {
        throw new Error("test error");
      })).to.be.rejectedWith("test error");
    });
  });
});