'use strict';

/* eslint-env mocha */

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
chai.use(chaiAsPromised);
var expect = chai.expect;

var _require = require('./testHelpers'),
    client = _require.client;

describe('Block', function () {

  describe('block count', function () {
    it('simple example', function () {
      return client.block.getBlockCount().then(function (items) {
        return expect(items.block_count).not.to.be.empty;
      });
    });
  });

  describe('block hash', function () {
    it('simple example', function () {
      return client.block.getBlockHash().then(function (resp) {
        expect(resp.block_hash).not.to.be.empty;
      });
    });
  });

  describe('get Block', function () {
    it('simple example', function () {
      var blockHash = void 0;
      return client.block.getBlockHash().then(function (resp) {
        blockHash = resp.block_hash;
        return client.block.getBlock({ block_hash: resp.block_hash });
      }).then(function (resp) {
        return expect(resp.hash).to.equal(blockHash);
      });
    });
  });

  describe('get Block Header', function () {
    it('simple example', function () {
      var blockHash = void 0;
      return client.block.getBlockHash().then(function (resp) {
        blockHash = resp.block_hash;
        return client.block.getBlockHeader({ block_hash: resp.block_hash });
      }).then(function (resp) {
        return expect(resp.block_header).not.to.be.empty;
      });
    });
  });

  describe('get Difficulty', function () {
    it('simple example', function () {
      var blockHash = void 0;
      return client.block.getBlockHash().then(function (resp) {
        blockHash = resp.block_hash;
        return client.block.getDifficulty({ block_hash: resp.block_hash });
      }).then(function (resp) {
        return expect(resp.hash).to.equal(blockHash);
      });
    });
  });

  describe('get Hash Rate', function () {
    it('simple example', function () {
      var blockHash = void 0;
      return client.block.getBlockHash().then(function (resp) {
        blockHash = resp.block_hash;
        return client.block.getHashRate({ block_hash: resp.block_hash });
      }).then(function (resp) {
        return expect(resp.hash).to.equal(blockHash);
      });
    });
  });
});