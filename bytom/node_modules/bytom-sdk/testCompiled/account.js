'use strict';

/* eslint-env mocha */

var bytom = require('../dist/index.js');
var uuid = require('uuid');
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');

chai.use(chaiAsPromised);
var expect = chai.expect;

var url = 'http://localhost:9888';
var accessToken = '';

var client = new bytom.Client(url, accessToken);

var xAccountAlias = 'x-' + uuid.v4();
var yAccountAlias = 'y-' + uuid.v4();

var mockHsmKey = void 0;

describe('Account', function () {

  before('set up API objects', function () {

    // Key and account creation
    return client.keys.listAll().then(function (keys) {
      mockHsmKey = keys[0];
    }).then(function () {
      return client.accounts.create({ alias: xAccountAlias, root_xpubs: [mockHsmKey.xpub], quorum: 1 });
    }).then(function () {
      return client.accounts.create({ alias: yAccountAlias, root_xpubs: [mockHsmKey.xpub], quorum: 1 });
    });
  });

  describe('Single account creation', function () {

    it('successful', function () {
      return client.accounts.create({ alias: 'alice-' + uuid.v4(), root_xpubs: [mockHsmKey.xpub], quorum: 1 }).then(function (resp) {
        return expect(resp.id).not.to.be.empty;
      });
    });

    it('rejected due to missing key fields', function () {
      return expect(client.accounts.create({ alias: 'david' })).to.be.rejectedWith('BTM202');
    });
  });

  describe('Single account alias update', function () {

    it('successful', function () {
      var newAlias = 'alice-' + uuid.v4();
      return client.accounts.updateAlias({
        account_alias: xAccountAlias,
        new_alias: newAlias
      }).then(function () {
        return client.accounts.list({
          alias: newAlias
        });
      }).then(function (resp) {
        return expect(resp[0].alias).to.include(newAlias);
      });
    });

    it('rejected due to missing ID/Alias', function () {
      return expect(client.accounts.updateAlias({
        // ID/Alias intentionally omitted
        new_alias: 'new'
      })).to.be.rejectedWith('BTM709');
    });
  });

  describe('Delete Account', function () {

    it('successful', function () {
      var alias = 'alice-' + uuid.v4();
      return client.accounts.create({ alias: alias, root_xpubs: [mockHsmKey.xpub], quorum: 1 }).then(function () {
        return client.accounts.delete({
          account_alias: alias
        });
      }).then(function (resp) {
        return expect(resp).to.be.empty;
      });
    });
  });

  describe('Account Receiver', function () {

    it('created Account Reciever', function () {
      return client.accounts.create({ alias: xAccountAlias, root_xpubs: [mockHsmKey.xpub], quorum: 1 }).then(function () {
        return client.accounts.createReceiver({ account_alias: xAccountAlias });
      }).then(function (resp) {
        return expect(resp.address).to.not.be.empty;
      });
    });

    it('list Account Reciever by alias', function () {
      var address = void 0;
      var alias = 'connie-' + uuid.v4();

      return client.accounts.create({ alias: alias, root_xpubs: [mockHsmKey.xpub], quorum: 1 }).then(function () {
        return client.accounts.createReceiver({ account_alias: alias });
      }).then(function (resp) {
        address = resp.address;
        return client.accounts.listAddresses({
          account_alias: alias
        });
      }).then(function (resp) {
        return expect(resp.map(function (item) {
          return item.address;
        })).to.include(address);
      });
    });

    it('list Account Reciever by Id', function () {
      var address = void 0,
          id = void 0;
      var alias = 'connie-' + uuid.v4();

      return client.accounts.create({ alias: alias, root_xpubs: [mockHsmKey.xpub], quorum: 1 }).then(function (resp) {
        id = resp.id;
        return client.accounts.createReceiver({ account_id: id });
      }).then(function (resp) {
        address = resp.address;
        return client.accounts.listAddresses({
          account_id: id
        });
      }).then(function (resp) {
        return expect(resp.map(function (item) {
          return item.address;
        })).to.include(address);
      });
    });
  });

  describe('list All Account', function () {
    it('success example', function () {
      var created = void 0;

      return client.accounts.create({
        alias: 'bob-' + uuid.v4(),
        root_xpubs: [mockHsmKey.xpub],
        quorum: 1
      }).then(function (account) {
        return created = account.id;
      }).then(function () {
        return client.accounts.listAll();
      }).then(function (resp) {
        return expect(resp.map(function (item) {
          return item.id;
        })).to.include(created);
      });
    });
  });
});