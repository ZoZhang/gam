'use strict';

/* eslint-env mocha */

var bytom = require('../dist/index.js');
var uuid = require('uuid');
var chai = require('chai');
var assert = require('assert');
var chaiAsPromised = require('chai-as-promised');

chai.use(chaiAsPromised);
var expect = chai.expect;

var url = 'http://localhost:9888';
var accessToken = '';

var client = new bytom.Client(url, accessToken);

var xAssetAlias = 'x-' + uuid.v4();
var yAssetAlias = 'y-' + uuid.v4();

var mockHsmKey = void 0,
    xAssetId = void 0,
    yAssetId = void 0;

describe('Asset', function () {

  before('set up API objects', function () {

    // Key and asset creation
    return client.keys.listAll().then(function (keys) {
      mockHsmKey = keys[0];
    }).then(function () {
      return client.assets.create({
        alias: xAssetAlias,
        definition: {
          decimals: 8,
          description: {},
          name: "TESTASSET1",
          symbol: "TESTASSET1"
        },
        root_xpubs: [mockHsmKey.xpub],
        quorum: 1 }).then(function (resp) {
        xAssetId = resp.id;
      });
    }).then(function () {
      return client.assets.create({
        alias: yAssetAlias,
        definition: {
          decimals: 8,
          description: {},
          name: "TESTASSET2",
          symbol: "TESTASSET2"
        },
        root_xpubs: [mockHsmKey.xpub],
        quorum: 1 }).then(function (resp) {
        yAssetId = resp.id;
      });
    });
  });

  describe('Single asset creation', function () {

    it('successful', function () {
      return client.assets.create({
        alias: 'asset-' + uuid.v4(),
        definition: {
          decimals: 8,
          description: {},
          name: 'TESTASSET-' + uuid.v4(),
          symbol: 'TESTASSET-' + uuid.v4()
        },
        root_xpubs: [mockHsmKey.xpub],
        quorum: 1 }).then(function (resp) {
        return expect(resp.id).not.to.be.empty;
      });
    });

    it('rejected due to missing key fields', function () {
      return expect(client.assets.create({ alias: 'asset' })).to.be.rejectedWith('BTM202');
    });
  });

  describe('Single asset alias update', function () {

    it('successful', function () {
      var alias = 'asset-' + uuid.v4();
      return client.assets.updateAlias({
        id: xAssetId,
        alias: alias
      }).then(function () {
        return client.assets.list(xAssetId);
      }).then(function (page) {
        assert.deepEqual(page.alias, alias.toUpperCase());
      });
    });

    it('rejected due to missing ID/Alias', function () {
      return expect(client.assets.updateAlias({
        // ID/Alias intentionally omitted
        alias: 'asset-' + uuid.v4()
      })).to.be.rejectedWith('BTM000');
    });
  });

  describe('listAll', function () {
    it('success example', function () {
      return client.assets.listAll().then(function (resp) {
        expect(resp.map(function (item) {
          return item.alias;
        })).to.be.an('array').that.include(yAssetAlias.toUpperCase());
      });
    });

    it('list success', function () {
      return client.assets.list(xAssetId).then(function (page) {
        assert.deepEqual(page.id, xAssetId);
      });
    });
  });
});